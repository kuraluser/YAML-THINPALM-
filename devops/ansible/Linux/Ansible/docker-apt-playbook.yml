# Ansible playbook CPDSS Ship Installation - Docker Microservices
---
- name: "CPDSS - Microservice Installation - Thinkpalm Instance"
  hosts: all
  become: true
  tasks:
    - name: Update all packages
      apt:
        name: '*'
        state: latest
        update_cache: yes
        force_apt_get: yes

    - name: Ensure a list of apt packages are installed
      apt:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
        - python3-pip
        - awscli
        - docker-compose
        - nfs-common

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest
    
    - name: add user to docker group
      ansible.builtin.user:
        name: '{{ ansible_ssh_user }}'
        groups: docker
        append: yes

    - name: Enable Docker CE service at startup
      service:
        name: docker
        state: started
        enabled: yes

    - name: reset ssh connection to allow user changes to affect ansible user
      ansible.builtin.meta:
        reset_connection

    - name: Check if swarm is already initialised
      shell: |
        docker info | grep "Swarm: active" | wc -l
      register: swarm_checked
    
    - name: output debug
      debug: var=swarm_checked

    - name: Init Swarm
      command: docker swarm init
      when: swarm_checked.stdout == "0"

    - name: Check if cpdss-network is already created
      shell: docker network ls | grep "cpdss-network" | wc -l
      register: nw_checked

    - name: output debug
      debug: var=nw_checked
    
    - name: Create CPDSS Network
      remote_user: '{{ ansible_ssh_user }}'
      shell: docker network create cpdss-network --scope swarm --driver overlay --attachable
      when: nw_checked.stdout == "0"
    
    - name: Get User Home Directory
      shell: >
             getent passwd {{ ansible_ssh_user }}  | awk -F: '{ print $6 }'
      changed_when: false
      register: user_home

    - name: Create EFS Directory
      remote_user: '{{ ansible_ssh_user }}'
      file:
        path: '{{ user_home.stdout }}/efs'
        state: directory
        owner: '{{ ansible_ssh_user }}'
        group: '{{ ansible_ssh_user }}'

    # - name: Create fstab entry for backup drive
    #   mount: 
    #     state: present 
    #     fstype: nfs4
    #     opts: "nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport" 
    #     src: fs-cff0088f.efs.ap-southeast-1.amazonaws.com:/
    #     path: '{{ user_home.stdout }}/efs'
    #   become: true
    
    # - name: Check if efs is already mounted
    #   shell: df | grep "/home/ec2-user/efs" | wc -l
    #   register: efs_checked
    
    # - name: output debug
    #   debug: var=efs_checked

    # - name: Mount backup drive
    #   shell: |
    #     mount '{{ user_home.stdout }}/efs'
    #   become: true
    #   when: efs_checked.stdout == "0"

    - name: 'create mount directory for {{ env_name }}'
      file:
        path: '{{ user_home.stdout }}/efs/{{ env_name }}'
        state: directory
        owner: '{{ ansible_ssh_user }}'
        group: '{{ ansible_ssh_user }}'
        mode: 0777
    
    - name: Create Envoy Data Directory
      file:
        path: '{{ user_home.stdout }}/efs/{{ env_name }}/envoy-data'
        state: directory

    - name: Create Json Directory
      file:
        path: '{{ user_home.stdout }}/efs/{{ env_name }}/json'
        state: directory