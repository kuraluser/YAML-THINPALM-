# Ansible playbook CPDSS Ship Installation - Docker Microservices
---
- name: "CPDSS - Microservice Installation - AWS Instance"
  hosts: all
  become: yes
  tasks:
    - name: Update all packages
      yum:
        name: '*'
        state: latest
        update_cache: yes

    - name: Ensure a list of apt packages are installed
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
        - python3-pip
        - awscli
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - amazon-linux-extras
        - nfs-utils

    - name: Add extras repository
      shell: yum-config-manager --enable extras

    - name: Install docker-ce (centos) via amazon-linux-extras packages
      shell: "amazon-linux-extras install docker -y"

    - name: Enable Docker CE service at startup
      service:
        name: docker
        state: started
        enabled: yes

    - name: Check if Docker Compose is installed
      command: docker-compose --version
      register: docker_compose_check
      ignore_errors: yes
    
    - name: Set variable
      shell: echo $(uname -s)-$(uname -m)
      register: distro

    - name: Download and install Docker Compose
      get_url:
        url: 'https://github.com/docker/compose/releases/download/1.22.0/docker-compose-{{ distro.stdout }}'
        dest: /usr/bin/docker-compose
        mode: 0755
      when:
        - docker_compose_check.msg is defined
        - docker_compose_check.msg.find('No such file or directory') != -1
    
    - name: add user to docker group
      ansible.builtin.user:
        name: '{{ ansible_ssh_user }}'
        groups: docker
        append: yes

    - name: reset ssh connection to allow user changes to affect ansible user
      ansible.builtin.meta:
        reset_connection

    - name: Check if swarm is already initialised
      shell: |
        docker info | grep "Swarm: active" | wc -l
      register: swarm_checked
    
    - name: output debug
      debug: var=swarm_checked

    - name: Init Swarm
      command: docker swarm init
      when: swarm_checked.stdout == "0"

    - name: Check if cpdss-network is already created
      shell: docker network ls | grep "cpdss-network" | wc -l
      register: nw_checked

    - name: output debug
      debug: var=nw_checked
    
    - name: Create CPDSS Network
      remote_user: '{{ ansible_ssh_user }}'
      shell: docker network create cpdss-network --scope swarm --driver overlay --attachable
      when: nw_checked.stdout == "0"
    
    - name: Get User Home Directory
      shell: >
             getent passwd {{ ansible_ssh_user }}  | awk -F: '{ print $6 }'
      changed_when: false
      register: user_home

    - name: Create EFS Directory
      remote_user: '{{ ansible_ssh_user }}'
      file:
        path: '{{ user_home.stdout }}/efs'
        state: directory
        owner: '{{ ansible_ssh_user }}'
        group: '{{ ansible_ssh_user }}'

    - name: Create fstab entry for backup drive
      mount: 
        state: present 
        fstype: nfs4
        opts: "nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport" 
        src: fs-cff0088f.efs.ap-southeast-1.amazonaws.com:/
        path: '{{ user_home.stdout }}/efs'
      become: true
    
    - name: Check if efs is already mounted
      shell: df | grep "/home/ec2-user/efs" | wc -l
      register: efs_checked
    
    - name: output debug
      debug: var=efs_checked

    - name: Mount backup drive
      shell: |
        mount '{{ user_home.stdout }}/efs'
      become: true
      when: efs_checked.stdout == "0"

    - name: 'create mount directory for {{ env_name }}'
      file:
        path: '{{ user_home.stdout }}/efs/{{ env_name }}'
        state: directory
        owner: '{{ ansible_ssh_user }}'
        group: '{{ ansible_ssh_user }}'
        mode: 0777
    
    - name: Create Envoy Data Directory
      file:
        path: '{{ user_home.stdout }}/efs/{{ env_name }}/envoy-data'
        state: directory

    - name: Create Json Directory
      file:
        path: '{{ user_home.stdout }}/efs/{{ env_name }}/json'
        state: directory