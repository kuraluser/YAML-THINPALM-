buildscript {
   repositories {
     mavenCentral()
     jcenter()
   }
}

plugins {
  id 'io.spring.dependency-management' version "1.0.8.RELEASE" apply false
  id 'org.springframework.boot' version '2.2.4.RELEASE' apply false
  id "name.remal.sonarlint" version "1.0.200" apply false
  id "io.freefair.lombok" version "5.1.0" apply false
  id "com.diffplug.gradle.spotless" version "3.28.0" apply false
}

ext {
  protobufVersion = "3.11.4"
  protocJavaVersion = "1.27.1"
  grpcVersion = "2.10.1.RELEASE"
  springVersion = "5.2.3.RELEASE"
  hazelcastVersion = "4.0.2"
  servletApiVersin = "2.5"
  modelMapperVersion = "2.3.5"
  junitTestVersion = "5.5.2"
  grpcUnitTestVersion = "1.32.1"
  javaAssistVersion = "3.27.0-GA"
}

//Compile only libraries for common application
project(':common') {
  apply plugin: 'java-library'
    project.with {
            dependencies {
                compileOnly "org.springframework.security:spring-security-web"
                compileOnly "org.springframework.security:spring-security-config"
                
			    compileOnly 'org.springframework.data:spring-data-couchbase'
			    compileOnly 'org.springframework.kafka:spring-kafka'
			    
			    compileOnly 'org.springframework.data:spring-data-redis' 
			    compileOnly "com.google.protobuf:protobuf-java:${protobufVersion}"
			    
				compileOnly "net.devh:grpc-spring-boot-starter:${grpcVersion}"
				compileOnly "io.grpc:grpc-protobuf:${protocJavaVersion}"
				compileOnly "io.grpc:grpc-stub:${protocJavaVersion}"
				compileOnly "io.grpc:grpc-netty-shaded:${protocJavaVersion}"
			    
			    compileOnly 'io.lettuce:lettuce-core'
			    compileOnly 'de.ruedigermoeller:fst:2.56'
			    
			    compileOnly 'org.apache.logging.log4j:log4j-api'
                compileOnly 'org.apache.logging.log4j:log4j-core'
			    
			    compileOnly 'org.springframework.data:spring-data-elasticsearch'
			    compileOnly 'org.springframework.data:spring-data-jpa'
			    compileOnly 'org.hibernate:hibernate-entitymanager'
			    compileOnly 'mysql:mysql-connector-java'
			    compileOnly 'org.postgresql:postgresql'
			    compileOnly 'com.zaxxer:HikariCP'
			    
			    compileOnly "com.hazelcast:hazelcast:${hazelcastVersion}"
			    compileOnly "com.hazelcast:hazelcast-spring:${hazelcastVersion}"
			    
			    compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
			    compileOnly 'org.springframework.boot:spring-boot-actuator-autoconfigure'
			    compileOnly "org.modelmapper:modelmapper:${modelMapperVersion}"
			    compileOnly 'org.springframework:spring-webmvc'
			    compileOnly 'jakarta.validation:jakarta.validation-api'
			    compileOnly "javax.servlet:servlet-api:${servletApiVersin}"
			    
			    implementation "org.javassist:javassist:${javaAssistVersion}"
            }
            
         }
}

//Extension for configuring ro plugin
class ROExtension {
    String security
    String dataBase
    String persistence
    String multitenancy
    String keyvaluestore
    String cache
    String queue
    String grpc
    String grpcServer
    String grpcClient
    String rest
    String search
    String logging
    String monitoring
    String devTools
    String javaMainClass
}

//Custom ro plugin for dependency managment and tools integration
class roapp implements Plugin<Project> {

    void apply(Project project) {
        def extension = project.extensions.create('appConfig', ROExtension)
        def date = new Date()
        project.afterEvaluate {
        
         def props = new Properties()
         
	        project.with {
	            // Defining dependencies
	            dependencies {
	                 
	                 def propertyFile = file("src/main/resources/projectInfo.properties")
	                 
	                implementation 'org.springframework.boot:spring-boot-starter'
	                
	                //Adding spring boot test frameworks to all applications
	                testImplementation('org.springframework.boot:spring-boot-starter-test') {
	                   exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	                }
	                // JUnit testing            
	                testImplementation ("org.mockito:mockito-core:3.4.0")
	                testImplementation 'org.mockito:mockito-inline:3.4.6'
    				testImplementation ("org.junit.jupiter:junit-jupiter-api:${junitTestVersion}")
    				testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:${junitTestVersion}")
					testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.5.2")	  
		
	                
	                if(extension.security == 'y'){
	                    implementation 'org.springframework.boot:spring-boot-starter-security'
	                    props.setProperty("security.enabled", 'y')
	                }
	                if(extension.monitoring == 'y'){
	                    implementation 'org.springframework.boot:spring-boot-starter-actuator'
	                }
	                if(extension.devTools == 'y'){
	                    developmentOnly 'org.springframework.boot:spring-boot-devtools'
	                }
	                if(extension.rest == 'y'){
	                  runtimeOnly "org.modelmapper:modelmapper:${modelMapperVersion}"
	                  implementation 'org.springframework.boot:spring-boot-starter-web'
	                  props.setProperty('spring.mvc.throw-exception-if-no-handler-found', 'true')
	                  if(extension.security != 'y'){
	                     props.setProperty("spring.autoconfigure.exclude", 'org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration')
	                  }
	                }
	                if(extension.search == 'y'){
	                  implementation 'org.springframework.data:spring-data-elasticsearch'
	                  
	                  if(extension.rest != 'y'){
	                     runtimeOnly('org.springframework.boot:spring-boot-starter-web'){
	                       exclude module: "spring-boot-tomcat"
	                     }
	                   }
	                }
				    if(extension.dataBase == 'couchbase') { 
				      implementation 'org.springframework.data:spring-data-couchbase'
				       props.setProperty("database", 'couchbase')
				    }
				    if(extension.keyvaluestore == 'y') {
				      runtimeOnly 'org.springframework.data:spring-data-redis'
				      runtimeOnly 'io.lettuce:lettuce-core'
				    }
				    if(extension.cache == 'y') {
				      runtimeOnly "com.hazelcast:hazelcast:${hazelcastVersion}"
			          runtimeOnly "com.hazelcast:hazelcast-spring:${hazelcastVersion}"
			          props.setProperty("cache.enabled", 'y')
				    }
				    if(extension.queue == 'y') {				    
					  implementation 'org.springframework.kafka:spring-kafka'
					  runtimeOnly "com.google.protobuf:protobuf-java:${protobufVersion}"
					  runtimeOnly 'de.ruedigermoeller:fst:2.56'
				    }
				    // For both grpc server and grpc client
				    if(extension.grpc == 'y') {
				       testImplementation("io.grpc:grpc-testing:${grpcUnitTestVersion}")
				      if(extension.rest != 'y'){
	                      runtimeOnly 'jakarta.validation:jakarta.validation-api'
	                  }
					  implementation "net.devh:grpc-spring-boot-starter:${grpcVersion}"
					}else if(extension.grpcServer == 'y') {
					   testImplementation("io.grpc:grpc-testing:${grpcUnitTestVersion}")
					  // For grpc server
					  if(extension.rest != 'y'){
	                      runtimeOnly 'jakarta.validation:jakarta.validation-api'
	                  }
					  implementation "net.devh:grpc-server-spring-boot-starter:${grpcVersion}"
					  runtimeOnly "io.grpc:grpc-stub:${protocJavaVersion}"
					}else if(extension.grpcClient == 'y') {
					   testImplementation("io.grpc:grpc-testing:${grpcUnitTestVersion}")
					  // For grpc client
					  implementation "net.devh:grpc-client-spring-boot-starter:${grpcVersion}"
					}
					
					if(extension.grpc == 'y' || extension.grpcClient == 'y') {
					  implementation "io.grpc:grpc-stub:${protocJavaVersion}"
					}
					if(extension.grpc == 'y' || extension.grpcServer == 'y' || extension.grpcClient == 'y') {
					  runtimeOnly "io.grpc:grpc-protobuf:${protocJavaVersion}"
					  runtimeOnly "io.grpc:grpc-netty-shaded:${protocJavaVersion}"
					}
					
					if(extension.persistence == 'springData') {
					  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
					  props.setProperty("persistence", 'springData')
					}
					
					if(extension.persistence == 'hibernate') {
					  implementation "org.springframework:spring-tx:${springVersion}"
					  runtimeOnly 'org.springframework.data:spring-data-jpa'
					  runtimeOnly "org.springframework:spring-aspects:${springVersion}"
					  runtimeOnly "org.springframework:spring-orm:${springVersion}"
					  runtimeOnly 'org.hibernate:hibernate-core'
					  runtimeOnly 'com.zaxxer:HikariCP'
					  
					  props.setProperty("persistence", 'hibernate')
					}
					
					if(extension.dataBase == 'mysql') {
					  runtimeOnly 'mysql:mysql-connector-java'
					  props.setProperty("dataBase", 'mysql')
					}
					
					if(extension.dataBase == 'postgres') {
					  runtimeOnly 'org.postgresql:postgresql'
					  props.setProperty("dataBase", 'postgres')
					}
					
					if(extension.multitenancy == 'y'){
					  props.setProperty("multitenancy.enabled", 'y')
					}
					if(extension.logging == 'y') {
					  implementation 'org.springframework.boot:spring-boot-starter-log4j2'
					  props.setProperty("log.enabled", 'y')
					}
					
					//Writing project infos
                    props.setProperty("version", project.version)
					props.store propertyFile.newWriter(), "DO NOT MODIFY THIS FILE"
	            }
	            
	            
	            //Defining custom build task
				def buildApp = tasks.register("build-${project.name}") {
				  group = 'ro'
				  description = 'Build application'
				}
				
				buildApp.configure {
				 doFirst {
				     
				     if(!project.appConfig.javaMainClass) {
				        throw new GradleException('No Java Main class is configured for the application')
				     }
				     if(project.appConfig.dataBase) {
				       if(project.appConfig.dataBase != "couchbase" && project.appConfig.dataBase != "postgres" && project.appConfig.dataBase != "mysql" ){
				            throw new GradleException('Unsupported database '+project.appConfig.dataBase+". Supports only couchbase, postgres and mysql.")
				        }
				     }
				     if(project.appConfig.persistence) {
				       if(project.appConfig.dataBase == "couchbase"){
				           throw new GradleException('Spring data persistence is implicitly configured for '+project.appConfig.dataBase+". Remove any persistence layer already added.")
				       }
				       if(project.appConfig.persistence != "springData" && project.appConfig.persistence != "hibernate"){
				            throw new GradleException('Unsupported persistence layer '+project.appConfig.persistence+'. Supports only springData and hibernate.')
				        }
				     }
				     if(project.appConfig.multitenancy) {
				       if(project.appConfig.dataBase != "postgres"){
				           throw new GradleException('Multitenancy is not supported for '+project.appConfig.dataBase+'. Supports only postgres database.')
				       }
				       if(project.appConfig.persistence != "springData"){
				            throw new GradleException('Multitenancy is not supported for '+project.appConfig.persistence+'. Supports only springData.')
				       }
				        if(!project.appConfig.rest || !project.appConfig.grpc || !project.appConfig.grpcServer){
				        throw new GradleException('Rest Or Grpc Server should be enabled for Multitenancy support')
				        }
				     }
				     String enabledServices=""
				     if(project.appConfig.dataBase){
				       enabledServices += project.appConfig.dataBase +" "
				     }
				     if(project.appConfig.rest){
				       enabledServices += "rest "
				     }
				     if(project.appConfig.persistence){
				       enabledServices += project.appConfig.persistence +" "
				     }
				     if(project.appConfig.logging){
				       enabledServices += "logging "
				     }
				     if(project.appConfig.keyvaluestore){
				       enabledServices += "redis "
				     }
				     if(project.appConfig.cache){
				       enabledServices += "hazelcast "
				     }
				     if(project.appConfig.search){
				       enabledServices += "elastic-search "
				     }
				     if(project.appConfig.queue){
				       enabledServices += "kafka "
				     }
				     if(project.appConfig.grpc){
				       enabledServices += "grpc "
				     }
				     if(project.appConfig.grpcServer){
				       enabledServices += "grpc-server "
				     }
				     if(project.appConfig.grpcClient){
				       enabledServices += "grpc-client "
				     }
				     println "Enabled services are : ${enabledServices}"
				  }
				 dependsOn build
				}
				
				//Defining custom run task
				def runApp = tasks.register("run-${project.name}") {
				    group = 'ro'
				    description = 'Run application'
				    dependsOn buildApp
				    finalizedBy bootRun
				}
	         }
         }
          
    }
}

// Configurations applied to all subprojects
subprojects {

  group = 'com.cpdss'
  version = '0.0.1-SNAPSHOT'

  repositories {
    jcenter()
    mavenCentral()
  }
  
  apply plugin: 'java'
  apply plugin: 'name.remal.sonarlint'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'io.freefair.lombok'
  apply plugin: 'com.diffplug.gradle.spotless'
  
  // Applying sonarlint plugin
  sonarlint {
     ignoreFailures = true
	 excludes {
	      source 'ro/common/generated/*'
	 }
   }
   
  // Applying spotless plugin with google java formatter
   spotless {
    java {
      googleJavaFormat()
      licenseHeader '/* Licensed under Apache-2.0 */'
    }
  }
  
  it.tasks.build.dependsOn it.tasks.spotlessApply
  
  //apply to all sub project except common
  if (!it.name.startsWith('common')) {
  
    apply plugin: roapp
	apply plugin: 'org.springframework.boot'

  }
  
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
 
 configurations {
    all {
          exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
      }
      developmentOnly
      runtimeClasspath {
          extendsFrom developmentOnly
      }
 }
 
 dependencyManagement {
    imports {
      mavenBom("org.springframework.boot:spring-boot-dependencies:2.2.4.RELEASE")
    }
  }
}