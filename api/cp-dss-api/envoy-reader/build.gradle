ext{
    salt = System.getenv('SALT') ?: ""
    cpdssBuildEnv = System.getenv('CPDSS_BUILD_ENV')?:""
    shipUrl = System.getenv('SHIP_URL')?:""
    shoreUrl = System.getenv('SHORE_URL')?:""

    grpcPortHost = System.getenv('GRPC_PORT_HOST') ?: '9096'
    debugPortHost = System.getenv('DEBUG_PORT_HOST') ?: '5096'
    imageNameVal = System.getenv('IMAGE_NAME') ?: 'cpdss-envoy-reader'
    containerNameVal = System.getenv('CONTAINER_NAME') ?: 'envoy-reader-container'
    serviceNameVal = System.getenv('SERVICE_NAME') ?: 'envoy-reader-service'
}

appConfig {
    grpc = 'y'
    logging = 'y'
    javaMainClass = "com.cpdss.envoyreader.Application"
    appName = 'envoy-reader'
    devTools = 'y'
    modelMapper = 'y'
    monitoring = 'y'
    docker {
        imageName = imageNameVal
        containerName = containerNameVal
        networkName = 'cpdss-network'
        memoryLimitInMB = 300
        hostPortMapping {
            hostGrpcPort = Integer.parseInt(grpcPortHost)
            hostDebugPort = Integer.parseInt(debugPortHost)
        }
        healthCheck {
            healthCheckCmd = 'wget --no-verbose --spider http://localhost:8080/actuator/health'
            healthCheckIntervalInSec = 30
            healthCheckInitialDelayInSec = 60
        }
        swarm {
            serviceName = serviceNameVal
            swarmMode = REPLICATED_MODE
            replicas = 1
            rollbackOnUpdateFailure = true
        }
        environment = ['GRPC_PORT': '8090', 'SALT': salt,'CPDSS_BUILD_ENV': cpdssBuildEnv, 'SHIP_URL': shipUrl,'SHORE_URL':shoreUrl]
    }
}

dependencies {
    implementation project(':common')
}
