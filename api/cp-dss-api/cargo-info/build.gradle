//Environment variables
ext{
  dbHost = System.getenv('DB_HOST') ?: ""
  dbName = System.getenv('DB_NAME') ?: ""
  dbUser = System.getenv('DB_USER') ?: ""
  dbPassword = System.getenv('DB_PASSWORD') ?: ""

  grpcPortHost = System.getenv('GRPC_PORT_HOST') ?: '9091'
  debugPortHost = System.getenv('DEBUG_PORT_HOST') ?: '5091'
  imageNameVal = System.getenv('IMAGE_NAME') ?: 'cpdss-cargo-info'
  containerNameVal = System.getenv('CONTAINER_NAME') ?: 'cargo-info-container'
  serviceNameVal = System.getenv('SERVICE_NAME') ?: 'cargo-info-service'
}

appConfig {
  appName = 'cargo-info'
  grpcServer = 'y'
  persistence = ['springData']
  dataBase = ['postgres']
  logging = 'y'
  devTools = 'y'
  unitTest = 'y'
  monitoring = 'y'
  docker {
    imageName = imageNameVal
    containerName = containerNameVal
    networkName = 'cpdss-network'
    memoryLimitInMB = 300
    hostPortMapping {
      hostGrpcPort = Integer.parseInt(grpcPortHost)
      hostDebugPort = Integer.parseInt(debugPortHost)
    }
    healthCheck {
      healthCheckCmd = 'wget --no-verbose --spider http://localhost:8080/actuator/health'
      healthCheckIntervalInSec = 30
      healthCheckInitialDelayInSec = 60
    }
    swarm {
      serviceName = serviceNameVal
      swarmMode = REPLICATED_MODE
      replicas = 1
      rollbackOnUpdateFailure = true
    }
    environment = ['GRPC_PORT': '8090', 'DB_HOST': dbHost, 'DB_NAME': dbName, 'DB_USER': dbUser, 'DB_PASSWORD': dbPassword]
  }
  javaMainClass = "com.cpdss.cargoinfo.Application"
}

dependencies {
  implementation project(':common')
}

