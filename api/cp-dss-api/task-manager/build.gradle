//Environment variables
ext{
  dbHost = System.getenv('DB_HOST') ?: ""
  dbName = System.getenv('DB_NAME') ?: ""
  dbUser = System.getenv('DB_USER') ?: ""
  dbPassword = System.getenv('DB_PASSWORD') ?: ""

  grpcPortHost = System.getenv('GRPC_PORT_HOST') ?: '8084'
  debugPortHost = System.getenv('DEBUG_PORT_HOST') ?: '5084'
  imageNameVal = System.getenv('IMAGE_NAME') ?: "cpdss-task-manager"
  containerNameVal = System.getenv('CONTAINER_NAME') ?: "task-manager-container"
  serviceNameVal = System.getenv('SERVICE_NAME') ?: "task-manager-service"
}

//Task Manager Service 
appConfig {
  appName = "task-manager"
  logging = 'y'
  devTools = 'y'
  persistence = 'springData'
  dataBase = 'postgres'
  monitoring = 'y'
  grpc = 'y'
  rest = 'y'
  docker {
    imageName = imageNameVal
    containerName = containerNameVal
    networkName = 'cpdss-network'
    memoryLimitInMB = 300
    hostPortMapping {
      hostGrpcPort = Integer.parseInt(grpcPortHost)
      hostDebugPort = Integer.parseInt(debugPortHost)
    }
    healthCheck {
      healthCheckCmd = 'wget --no-verbose --spider http://localhost:8080/actuator/health'
      healthCheckIntervalInSec = 30
      healthCheckInitialDelayInSec = 60
    }
    swarm {
      serviceName = serviceNameVal
      swarmMode = REPLICATED_MODE
      replicas = 1
      rollbackOnUpdateFailure = true
    }
    dns = ['8.8.8.8']
    environment = ['GRPC_PORT': '8090', 'DB_HOST': dbHost, 'DB_NAME': dbName, 'DB_USER': dbUser,
                   'DB_PASSWORD': dbPassword]
  }
  javaMainClass = "com.cpdss.task.manager.Application"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation project(':common')
}